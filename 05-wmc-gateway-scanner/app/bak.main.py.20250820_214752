"""
WMC Gateway QR Scanner Service - Updated with OAuth2
Version: 1.0.4
Updated: 2025-08-20 16:55:00 UTC
Authors: SenseMy IoT Development Team

Purpose: Mobile QR code scanner for WMC gateway status lookup with OAuth2 authentication
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
import os
import logging
from contextlib import asynccontextmanager

# Import the correct service (now available)
from app.services.wmc_service import WMCService
from app.routes.gateway_routes import gateway_router
from app.routes.auth_routes import auth_router

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Global WMC service instance
wmc_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager"""
    global wmc_service

    # Startup
    logger.info("üöÄ Starting WMC Gateway Scanner Service v1.0.4")

    try:
        # Initialize WMC service with OAuth2 support
        wmc_service = WMCService()

        # Import and set WMC service in routes
        from app.routes import gateway_routes as gr
        from app.routes import auth_routes as ar

        gr.wmc_service_instance = wmc_service
        ar.wmc_service_instance = wmc_service

        # Set up OAuth2 routes
        try:
            from app.routes.oauth2_routes import oauth2_router, set_dependencies
            templates = Jinja2Templates(directory="templates")
            set_dependencies(wmc_service, templates)
            app.include_router(oauth2_router, prefix="/api/v1")
            logger.info("‚úÖ OAuth2 routes configured")
        except ImportError:
            logger.warning("‚ö†Ô∏è OAuth2 routes not available - creating inline")
            
            # Create OAuth2 routes inline if file doesn't exist
            from fastapi import APIRouter
            oauth2_router = APIRouter()
            
            @oauth2_router.get("/auth/login")
            async def oauth2_login():
                """Initiate OAuth2 login flow"""
                try:
                    auth_url, state, code_verifier = wmc_service.get_authorization_url()
                    return {
                        "authorization_url": auth_url,
                        "state": state,
                        "code_verifier": code_verifier,
                        "message": "Redirect to authorization_url to complete login"
                    }
                except Exception as e:
                    raise HTTPException(status_code=500, detail=str(e))
            
            @oauth2_router.post("/auth/exchange-token")
            async def exchange_token(request: Request):
                """Exchange authorization code for access token"""
                try:
                    body = await request.json()
                    authorization_code = body.get("code")
                    code_verifier = body.get("code_verifier")
                    
                    if not authorization_code or not code_verifier:
                        raise HTTPException(status_code=400, detail="Missing code or code_verifier")
                    
                    token = await wmc_service.exchange_code_for_token(authorization_code, code_verifier)
                    
                    return {
                        "success": True,
                        "token_type": token.token_type,
                        "expires_in": token.expires_in,
                        "expires_at": token.expires_at.isoformat() if token.expires_at else None,
                        "message": "Authentication successful"
                    }
                except Exception as e:
                    raise HTTPException(status_code=500, detail=str(e))
            
            app.include_router(oauth2_router, prefix="/api/v1")

        logger.info("‚úÖ WMC Gateway Scanner Service started successfully")

        yield

    except Exception as e:
        logger.error(f"‚ùå Failed to start WMC service: {e}")
        raise

    # Shutdown
    logger.info("üõë Shutting down WMC Gateway Scanner Service")
    if wmc_service:
        await wmc_service.close()

# Create FastAPI application
app = FastAPI(

    # Routers
    from app.routes import health as health_routes
    app.include_router(health_routes.router)
    title="WMC Gateway QR Scanner",
    description="Mobile QR code scanner for WMC gateway status lookup with OAuth2 authentication",
    version="1.0.4",
    lifespan=lifespan
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Setup templates
templates = Jinja2Templates(directory="templates")

# Include API routers
app.include_router(gateway_router, prefix="/api/v1", tags=["gateways"])
app.include_router(auth_router, prefix="/api/v1", tags=["authentication"])

# Main routes
@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """Serve the main QR scanner interface"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/pwa", response_class=HTMLResponse)
async def pwa_app(request: Request):
    """Serve the PWA version of the scanner"""
    return templates.TemplateResponse("pwa_index.html", {"request": request})

@app.get("/health")
async def health_check():
    """Service health check endpoint"""
    global wmc_service
    
    if wmc_service:
        return await wmc_service.health_check()
    else:
        return {
            "status": "WMC Gateway Scanner starting... ‚è≥",
            "version": "1.0.4",
            "service": "wmc-gateway-scanner",
            "wmc_api_status": "initializing"
        }

@app.get("/auth-status")
async def auth_status():
    """Get current authentication status for frontend"""
    global wmc_service
    
    if not wmc_service:
        return {"authenticated": False, "service_ready": False}
    
    try:
        status = await wmc_service.get_connection_status()
        oauth2_status = wmc_service.get_oauth2_status()
        
        return {
            "service_ready": True,
            "authenticated": oauth2_status["authenticated"],
            "token_valid": oauth2_status["token_valid"],
            "connection_ok": status["connected"],
            "expires_at": oauth2_status["expires_at"],
            "auth_method": "oauth2"
        }
    except Exception as e:
        logger.error(f"‚ùå Auth status error: {e}")
        return {
            "service_ready": True,
            "authenticated": False,
            "error": str(e)
        }

# Error handlers
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """Custom 404 handler"""
    return templates.TemplateResponse(
        "index.html", 
        {"request": request}, 
        status_code=404
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: HTTPException):
    """Custom 500 handler"""
    logger.error(f"‚ùå Internal server error: {exc}")
    return {
        "error": "Internal server error",
        "detail": "Check service logs for details",
        "status_code": 500
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=7300,
        reload=False,
        log_level="info"
    )
