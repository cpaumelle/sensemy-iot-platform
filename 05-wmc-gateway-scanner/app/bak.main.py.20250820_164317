"""
WMC Gateway QR Scanner Service
Version: 1.0.3
Updated: 2025-08-20 17:30:00 UTC
Authors: SenseMy IoT Development Team

Purpose: Mobile QR code scanner for WMC gateway status lookup
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
import os
import logging
from contextlib import asynccontextmanager

# Import with correct app. prefix since we're running as python -m app.main
from app.services.wmc_service import WMCService
from app.routes.gateway_routes import gateway_router
from app.routes.auth_routes import auth_router

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Global WMC service instance
wmc_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager"""
    global wmc_service
    
    # Startup
    logger.info("üöÄ Starting WMC Gateway Scanner Service v1.0.3")
    
    try:
        wmc_service = WMCService()
        
        # Import and set WMC service in routes
        from app.routes import gateway_routes as gr
        from app.routes import auth_routes as ar
        
        gr.wmc_service_instance = wmc_service
        ar.wmc_service_instance = wmc_service
        
        logger.info("‚úÖ WMC service initialized and injected into routes")
        
        # Test WMC connectivity on startup
        try:
            await wmc_service.test_connection()
            logger.info("‚úÖ WMC API connection test successful")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è WMC API connection test failed: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize WMC service: {e}")
        # Continue startup even if WMC is not available
        
    yield
    
    # Shutdown
    logger.info("üõë Shutting down WMC Gateway Scanner Service")
    if wmc_service:
        try:
            await wmc_service.close()
        except Exception as e:
            logger.error(f"‚ùå Error closing WMC service: {e}")

# Create FastAPI application
app = FastAPI(
    title="WMC Gateway QR Scanner",
    description="Mobile QR code scanner for WMC gateway status lookup",
    version="1.0.3",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Static files and templates
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
    templates = Jinja2Templates(directory="templates")
    logger.info("‚úÖ Static files and templates mounted successfully")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Could not mount static files or templates: {e}")
    templates = None

# Include routers
app.include_router(gateway_router, prefix="/api/v1", tags=["gateways"])
app.include_router(auth_router, prefix="/api/v1", tags=["authentication"])

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """Main QR scanner interface"""
    if templates:
        try:
            # Try PWA version first
            return templates.TemplateResponse("pwa_index.html", {"request": request})
        except:
            try:
                # Fallback to basic version
                return templates.TemplateResponse("index.html", {"request": request})
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Template error: {e}")
    
    # HTML fallback if templates not available
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>WMC Gateway Scanner</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            h1 { color: #333; }
            .links { margin-top: 20px; }
            .links a { display: inline-block; margin: 10px 10px 10px 0; padding: 10px 15px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; }
            .links a:hover { background: #0056b3; }
            .status { padding: 10px; background: #d4edda; border-left: 4px solid #28a745; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîç WMC Gateway Scanner</h1>
            <div class="status">
                ‚úÖ Service is running successfully!
            </div>
            <p>Mobile QR code scanner for WMC gateway status lookup.</p>
            <div class="links">
                <a href="/docs">üìñ API Documentation</a>
                <a href="/health">üè• Health Check</a>
                <a href="/status">üìä Service Status</a>
                <a href="/test">üß™ Test Endpoint</a>
            </div>
            <h3>Quick Test</h3>
            <p>Test gateway EUI validation:</p>
            <p><a href="/api/v1/gateways/validate-eui/7276FF002E123456">Validate Sample EUI</a></p>
        </div>
    </body>
    </html>
    """)

@app.get("/health")
async def health_check():
    """Service health check"""
    wmc_status = "not_initialized"
    if wmc_service:
        try:
            status = await wmc_service.get_connection_status()
            wmc_status = "connected" if status.get("connected") else "disconnected"
        except Exception as e:
            wmc_status = f"error: {str(e)}"
    
    return {
        "status": "WMC Gateway Scanner healthy ‚úÖ",
        "version": "1.0.3",
        "service": "wmc-gateway-scanner",
        "wmc_api_status": wmc_status,
        "templates_available": templates is not None,
        "features": [
            "qr_code_scanning",
            "wmc_api_integration", 
            "mobile_responsive_ui",
            "real_time_gateway_status"
        ]
    }

@app.get("/status")
async def service_status():
    """Extended service status"""
    wmc_status = {"connected": False, "error": "not_initialized"}
    if wmc_service:
        try:
            wmc_status = await wmc_service.get_connection_status()
        except Exception as e:
            wmc_status = {"connected": False, "error": str(e)}
    
    return {
        "service": "healthy",
        "wmc_api": wmc_status,
        "templates_available": templates is not None,
        "features_enabled": {
            "qr_scanning": True,
            "gateway_lookup": wmc_status.get("connected", False),
            "mobile_ui": templates is not None
        }
    }

@app.get("/test")
async def test_endpoint():
    """Simple test endpoint"""
    return {
        "message": "WMC Gateway Scanner is running! üöÄ",
        "timestamp": "2025-08-20T17:30:00Z",
        "version": "1.0.3"
    }

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 7300))
    uvicorn.run(app, host="0.0.0.0", port=port)
