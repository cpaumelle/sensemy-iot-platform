#!/bin/bash
# 50-test_devices_api.sh - Version: 1.3.1 - 2025-08-01 11:45 UTC
# Changelog:
# - Adds unarchive step for bulk test devices
# - Adds fancy hint for 'Device not found' JSON errors
# - All 12 endpoints tested with real data and cleaned up

API_BASE="${API_BASE:-https://api3.sensemy.cloud/v1/devices}"

VALID_DEV_EUI="58A0CB00001088D7"
EXISTING_LOCATION_ID="cfd565f3-3d58-4c0f-9be1-b1c2d8338394"
EXISTING_DEVICE_TYPE_ID=1
BULK_DEV_1="58A0CB0000108FF2"
BULK_DEV_2="58A0CB000010162C"


echo "üß™ Running Transform Device API tests..."
echo "üî∏ API Base:      $API_BASE"
echo "üî∏ Test DevEUI:   $VALID_DEV_EUI"
echo "üî∏ Location ID:   $EXISTING_LOCATION_ID"
echo "üî∏ Device Type:   $EXISTING_DEVICE_TYPE_ID"
echo

pass_count=0
fail_count=0

run_test() {
    local description=$1
    local method=$2
    local url=$3
    local data=$4

    echo "üîπ $description ..."
    if [[ "$method" == "GET" ]]; then
        response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    elif [[ "$method" == "PUT" && -z "$data" ]]; then
        response=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "$url")
    else
        response=$(curl -s -o /dev/null -w "%{http_code}" -X "$method" -H "Content-Type: application/json" -d "$data" "$url")
    fi

    if [[ "$response" == 200 || "$response" == 201 ]]; then
        echo "‚úÖ PASS ($response)"
        ((pass_count++))
    else
        echo "‚ùå FAIL ($response)"
        ((fail_count++))

        read -p "üîÅ Retry with verbose output? (y/N): " retry
        if [[ "$retry" == "y" || "$retry" == "Y" ]]; then
            echo
            echo "üîç Retrying with verbose curl:"
            if [[ "$method" == "GET" ]]; then
                curl -v "$url"
            elif [[ "$method" == "PUT" && -z "$data" ]]; then
                curl -v -X PUT "$url"
            else
                curl -v -X "$method" -H "Content-Type: application/json" -d "$data" "$url"
            fi
            echo
        fi

        # Fancy hint for device-not-found
        detail=$(curl -s -X "$method" -H "Content-Type: application/json" -d "$data" "$url")
        if echo "$detail" | grep -q "Device not found"; then
            echo "üí° Hint: Device might be archived. Try unarchiving it first."
        fi
    fi
}

# ------------------------------
# Main Tests
# ------------------------------
run_test "GET /devices"                        "GET"    "$API_BASE"
run_test "GET /devices/types"                 "GET"    "$API_BASE/types"
run_test "GET /devices/{deveui}"              "GET"    "$API_BASE/$VALID_DEV_EUI"
run_test "PUT /devices/{deveui}/assign"       "PUT"    "$API_BASE/$VALID_DEV_EUI/assign?location_id=$EXISTING_LOCATION_ID"
run_test "PUT /devices/{deveui}"              "PUT"    "$API_BASE/$VALID_DEV_EUI" '{"name": "updated-name"}'
run_test "PUT /devices/{deveui}/unassign"     "PUT"    "$API_BASE/$VALID_DEV_EUI/unassign"
run_test "PATCH /devices/{deveui}"            "PATCH"  "$API_BASE/$VALID_DEV_EUI?confirm=true"
run_test "PATCH /devices/{deveui}/unarchive"  "PATCH"  "$API_BASE/$VALID_DEV_EUI/unarchive?lifecycle_state=active"

# ------------------------------
# POST /devices + cleanup
# ------------------------------
NEW_DEV_EUI="58A0CB$(openssl rand -hex 5 | tr 'a-f' 'A-F')"
echo "üîß Creating test device: $NEW_DEV_EUI"

run_test "POST /devices (create)" "POST" "$API_BASE" \
  '{"deveui": "'"$NEW_DEV_EUI"'", "device_type_id": '"$EXISTING_DEVICE_TYPE_ID"', "location_id": "'"$EXISTING_LOCATION_ID"'"}'

echo "üßπ Archiving dummy device $NEW_DEV_EUI..."
curl -s -X PATCH "$API_BASE/$NEW_DEV_EUI?confirm=true" > /dev/null
echo "‚úÖ Archived $NEW_DEV_EUI"

# ------------------------------
# PREP: Unarchive bulk test devices if needed
# ------------------------------
echo "üîß Ensuring test devices are unarchived..."
curl -s -X PATCH "$API_BASE/$BULK_DEV_1/unarchive" > /dev/null
curl -s -X PATCH "$API_BASE/$BULK_DEV_2/unarchive" > /dev/null

# ------------------------------
# PATCH /devices/assign-type (bulk)
# ------------------------------
run_test "PATCH /devices/assign-type (bulk)" "PATCH" "${API_BASE%/}/assign-type" \
  '{"device_type_id": '"$EXISTING_DEVICE_TYPE_ID"', "device_ids": ["'"$BULK_DEV_1"'", "'"$BULK_DEV_2"'"]}'

# ------------------------------
# PATCH /devices/assign-location (bulk)
# ------------------------------
run_test "PATCH /devices/assign-location" "PATCH" "${API_BASE%/}/assign-location" \
  '{"location_id": "'"$EXISTING_LOCATION_ID"'", "device_ids": ["'"$BULK_DEV_1"'", "'"$BULK_DEV_2"'"]}'

# ------------------------------
# Summary
# ------------------------------
echo
echo "üìã Test Summary:"
echo "‚úÖ Passed: $pass_count"
echo "‚ùå Failed: $fail_count"
