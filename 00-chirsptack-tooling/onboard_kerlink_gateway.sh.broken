#!/bin/bash
# Kerlink Gateway Onboarding Script for ChirpStack
# Complete end-to-end gateway setup with Python gRPC registration built-in
# Run this script on VM 113

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color

# Load environment variables
ENV_FILE="${SCRIPT_DIR}/.env"
if [ -f "$ENV_FILE" ]; then
    echo -e "${GREEN}✓ Loading configuration from .env${NC}"
    export $(grep -v '^#' "$ENV_FILE" | xargs)
else
    echo -e "${RED}✗ No .env file found at ${ENV_FILE}${NC}"
    echo -e "${YELLOW}  Please create .env from .env.example${NC}"
    exit 1
fi

# Set defaults from environment or use fallbacks
CHIRPSTACK_GRPC="${CHIRPSTACK_GRPC_SERVER:-10.44.1.110:8080}"
LNS_URL="${LNS_WEBSOCKET_URL:-wss://chirpstack-gw.sensemy.cloud:3002}"
CHIRPSTACK_WEB="${CHIRPSTACK_WEB_URL:-https://chirpstack.sensemy.cloud}"
GATEWAY_NAME_PREFIX="${DEFAULT_GATEWAY_NAME_PREFIX:-Kerlink}"
STATS_INTERVAL="${GATEWAY_STATS_INTERVAL:-30}"

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Kerlink Gateway Onboarding Script${NC}"
echo -e "${GREEN}ChirpStack Basic Station Setup${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Validate API key
if [ -z "$CHIRPSTACK_API_KEY" ]; then
    echo -e "${RED}✗ CHIRPSTACK_API_KEY not set in .env file${NC}"
    echo ""
    echo -e "${YELLOW}To create an API key:${NC}"
    echo "  1. Go to: ${CHIRPSTACK_WEB}"
    echo "  2. Login (admin/admin)"
    echo "  3. Navigate to: API Keys → Add API Key"
    echo "  4. Create a key with 'Admin' permissions"
    echo "  5. Add to .env file: CHIRPSTACK_API_KEY=<your-key>"
    echo ""
    exit 1
fi
echo -e "${GREEN}✓ Using API key from .env${NC}"

# Prompt for gateway IP (or use from env)
if [ -z "$GATEWAY_IP" ]; then
    echo ""
    read -p "Enter the gateway IP address (e.g., 192.168.1.100): " GATEWAY_IP
fi

if [ -z "$GATEWAY_IP" ]; then
    echo -e "${RED}Error: Gateway IP is required${NC}"
    exit 1
fi

echo ""
echo -e "${YELLOW}Testing connectivity to gateway...${NC}"
if ! ping -c 1 -W 2 "$GATEWAY_IP" > /dev/null 2>&1; then
    echo -e "${RED}Error: Cannot reach gateway at $GATEWAY_IP${NC}"
    exit 1
fi
echo -e "${GREEN}✓ Gateway is reachable${NC}"

# Prompt for root password (or use from env)
if [ -z "$GATEWAY_PASSWORD" ]; then
    echo ""
    read -s -p "Enter root password for the gateway: " GATEWAY_PASSWORD
    echo ""
fi

if [ -z "$GATEWAY_PASSWORD" ]; then
    echo -e "${RED}Error: Password is required${NC}"
    exit 1
fi

GATEWAY_USER="${GATEWAY_DEFAULT_USER:-root}"

echo ""
echo -e "${YELLOW}Connecting to gateway...${NC}"

# Function to run SSH command
run_ssh_cmd() {
    SSHPASS="$GATEWAY_PASSWORD" sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${GATEWAY_USER}@$GATEWAY_IP "$1" 2>&1 | grep -v "Warning: Permanently added"
}

# Test SSH connection with better error handling
echo -e "${YELLOW}Testing SSH authentication...${NC}"
SSH_TEST=$(SSHPASS="$GATEWAY_PASSWORD" sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${GATEWAY_USER}@$GATEWAY_IP "echo 'Connection successful'" 2>&1)
SSH_EXIT=$?

if [ $SSH_EXIT -ne 0 ]; then
    echo -e "${RED}Error: Failed to connect via SSH${NC}"
    echo -e "${YELLOW}Debug info:${NC}"
    echo "$SSH_TEST" | grep -v "Warning: Permanently added"
    echo ""
    echo -e "${YELLOW}Common issues:${NC}"
    echo "  1. Wrong password"
    echo "  2. SSH not enabled on gateway"
    echo "  3. Firewall blocking port 22"
    echo "  4. sshpass not installed (run: apt install sshpass)"
    exit 1
fi
echo -e "${GREEN}✓ SSH connection established${NC}"

echo ""
echo -e "${YELLOW}Step 1/6: Gathering gateway information...${NC}"

# Get gateway EUI - try multiple methods
GATEWAY_EUI=$(run_ssh_cmd "klk_get_gweui 2>/dev/null" || true)
if [ -z "$GATEWAY_EUI" ] || [ "$GATEWAY_EUI" == "N/A" ]; then
    GATEWAY_EUI=$(run_ssh_cmd "cat /var/config/productid 2>/dev/null" || true)
fi
if [ -z "$GATEWAY_EUI" ] || [ "$GATEWAY_EUI" == "N/A" ]; then
    GATEWAY_EUI=$(run_ssh_cmd "grep -i '\"EUI64\"' /tmp/board_info.json 2>/dev/null | sed -E 's/.*\"EUI64\": *\"([0-9A-Fa-f]+)\".*/\1/'" || true)
fi
if [ -z "$GATEWAY_EUI" ]; then
    GATEWAY_EUI="N/A"
fi

# Get hostname from uname -a (e.g., "Linux klk-fevo-04010B ..." -> "klk-fevo-04010B")
UNAME_OUTPUT=$(run_ssh_cmd "uname -a")
GATEWAY_HOSTNAME=$(echo "$UNAME_OUTPUT" | awk '{print $2}')

# Get kernel version
KERNEL_VERSION=$(echo "$UNAME_OUTPUT" | awk '{print $3}')

# Get architecture
ARCH=$(echo "$UNAME_OUTPUT" | awk '{print $NF}')

echo -e "  Gateway EUI: ${GREEN}$GATEWAY_EUI${NC}"
echo -e "  Hostname: ${GREEN}$GATEWAY_HOSTNAME${NC}"
echo -e "  Kernel: ${GREEN}$KERNEL_VERSION${NC}"
echo -e "  Architecture: ${GREEN}$ARCH${NC}"

# Prompt for gateway name with hostname as default
echo ""
if [ -n "$GATEWAY_HOSTNAME" ] && [ "$GATEWAY_HOSTNAME" != "N/A" ]; then
    DEFAULT_NAME="$GATEWAY_HOSTNAME"
else
    DEFAULT_NAME="${GATEWAY_NAME_PREFIX}-${GATEWAY_EUI: -8}"
fi

read -p "Enter a name for this gateway (default: ${DEFAULT_NAME}): " GATEWAY_NAME
if [ -z "$GATEWAY_NAME" ]; then
    GATEWAY_NAME="$DEFAULT_NAME"
fi

# Prompt for gateway description
read -p "Enter gateway description (optional): " GATEWAY_DESC

echo ""
echo -e "${YELLOW}Configuration Summary:${NC}"
echo -e "  Gateway Name: ${BLUE}$GATEWAY_NAME${NC}"
echo -e "  Gateway EUI: ${BLUE}$GATEWAY_EUI${NC}"
echo -e "  Gateway IP: ${BLUE}$GATEWAY_IP${NC}"
echo -e "  LNS URL: ${BLUE}$LNS_URL${NC}"
echo -e "  ChirpStack Server: ${BLUE}$CHIRPSTACK_GRPC${NC}"
echo ""
read -p "Proceed with configuration? (yes/no): " CONFIRM

if [[ "$CONFIRM" != "yes" && "$CONFIRM" != "y" ]]; then
    echo "Configuration cancelled."
    exit 0
fi

echo ""
echo -e "${YELLOW}Step 2/6: Installing Basic Station via Magic Link...${NC}"
run_ssh_cmd "curl --compressed -s https://upgrade.wanesy.com/BasicStation_Cockpit | sh"
echo -e "${YELLOW}  Waiting for gateway to reboot and come back online...${NC}"
echo -e "${YELLOW}  This may take 2-3 minutes...${NC}"

# Wait for gateway to come back online
RETRY_COUNT=0
MAX_RETRIES=60  # 5 minutes max
while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if ping -c 1 -W 2 "$GATEWAY_IP" > /dev/null 2>&1; then
        echo -e "${GREEN}✓ Gateway is back online${NC}"
        break
    fi
    echo -n "."
    sleep 5
    RETRY_COUNT=$((RETRY_COUNT + 1))
done
echo ""

if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
    echo -e "${RED}✗ Gateway did not come back online within 5 minutes${NC}"
    echo -e "${YELLOW}  Please check gateway status manually${NC}"
    exit 1
fi

echo -e "${YELLOW}  Waiting additional 30 seconds for services to start...${NC}"
sleep 30
echo -e "${GREEN}✓ Basic Station installed via Magic Link${NC}"
fi

echo ""
echo -e "${YELLOW}Step 3/6: Configuring and starting Basic Station...${NC}"
# Test SSH connection after reboot
echo -e "${YELLOW}  Re-establishing SSH connection...${NC}"
SSH_TEST=$(SSHPASS="$GATEWAY_PASSWORD" sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ${GATEWAY_USER}@$GATEWAY_IP "echo 'Connection successful'" 2>run_ssh_cmd "/user/basic_station/bin/klk_bs_config --enable --lns-uri \"$LNS_URL\""1)
SSH_EXIT=$?
if [ $SSH_EXIT -ne 0 ]; then
    echo -e "${RED}Error: Failed to reconnect via SSH after reboot${NC}"
    exit 1
fi
echo -e "${GREEN}✓ SSH reconnected${NC}"

run_ssh_cmd "/user/basic_station/bin/klk_bs_config --enable --lns-uri \"$LNS_URL\""
echo -e "${GREEN}✓ Basic Station configured and started${NC}"

echo ""
echo -e "${YELLOW}Step 4/6: Registering gateway in ChirpStack...${NC}"

# Python inline gateway registration
REGISTER_OUTPUT=$(python3 - "$CHIRPSTACK_GRPC" "$CHIRPSTACK_API_KEY" "$GATEWAY_EUI" "$GATEWAY_NAME" "$GATEWAY_DESC" <<'PYTHON_SCRIPT'
import sys
import grpc
from chirpstack_api import api

def register_gateway(server, api_token, gateway_eui, gateway_name, gateway_desc="", stats_interval=30):
    """Register a gateway in ChirpStack"""
    channel = grpc.insecure_channel(server)
    auth_token = [("authorization", "Bearer %s" % api_token)]

    try:
        # Get tenant ID
        tenant_client = api.TenantServiceStub(channel)
        req = api.ListTenantsRequest()
        req.limit = 1
        resp = tenant_client.List(req, metadata=auth_token)

        if not resp.result:
            return {"success": False, "error": "No tenants found"}

        tenant_id = resp.result[0].id
        tenant_name = resp.result[0].name

        # Create gateway
        gateway_client = api.GatewayServiceStub(channel)
        req = api.CreateGatewayRequest()
        req.gateway.gateway_id = gateway_eui
        req.gateway.name = gateway_name
        req.gateway.description = gateway_desc
        req.gateway.tenant_id = tenant_id
        req.gateway.stats_interval = stats_interval

        resp = gateway_client.Create(req, metadata=auth_token)

        return {
            "success": True,
            "tenant_id": tenant_id,
            "tenant_name": tenant_name,
            "gateway_eui": gateway_eui,
            "gateway_name": gateway_name
        }

    except Exception as e:
        error_msg = str(e)
        if "object already exists" in error_msg.lower():
            return {"success": False, "error": "Gateway already exists", "exists": True}
        else:
            return {"success": False, "error": error_msg}

if __name__ == "__main__":
    server = sys.argv[1]
    api_token = sys.argv[2]
    gateway_eui = sys.argv[3]
    gateway_name = sys.argv[4]
    gateway_desc = sys.argv[5] if len(sys.argv) > 5 else ""

    result = register_gateway(server, api_token, gateway_eui, gateway_name, gateway_desc)

    if result["success"]:
        print("SUCCESS")
        print(f"Tenant: {result['tenant_name']}")
        print(f"Gateway: {result['gateway_name']}")
        print(f"EUI: {result['gateway_eui']}")
    elif result.get("exists"):
        print("EXISTS")
    else:
        print("ERROR")
        print(f"Error: {result['error']}")
        sys.exit(1)
PYTHON_SCRIPT
)

REGISTER_STATUS=$(echo "$REGISTER_OUTPUT" | head -1)

if [ "$REGISTER_STATUS" == "SUCCESS" ]; then
    echo -e "${GREEN}✓ Gateway registered in ChirpStack${NC}"
    echo "$REGISTER_OUTPUT" | tail -n +2 | while read line; do
        echo -e "  ${line}"
    done
elif [ "$REGISTER_STATUS" == "EXISTS" ]; then
    echo -e "${YELLOW}⚠ Gateway already exists in ChirpStack${NC}"
else
    echo -e "${RED}✗ Failed to register gateway${NC}"
    echo "$REGISTER_OUTPUT" | tail -n +2 | while read line; do
        echo -e "  ${line}"
    done
    echo -e "${YELLOW}You may need to add the gateway manually in the UI${NC}"
fi

echo ""
echo -e "${YELLOW}Step 5/6: Verifying service status...${NC}"
SERVICE_STATUS=$(run_ssh_cmd "monit status station 2>/dev/null | grep -E 'status|Running'" || true)
echo -e "  Status: ${GREEN}$SERVICE_STATUS${NC}"

echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Onboarding Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo -e "${BLUE}Gateway Details:${NC}"
echo -e "  Name: ${GREEN}$GATEWAY_NAME${NC}"
echo -e "  EUI: ${GREEN}$GATEWAY_EUI${NC}"
echo -e "  Status: Check at ${GREEN}${CHIRPSTACK_WEB}${NC}"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo -e "1. Log in to ChirpStack at: ${GREEN}${CHIRPSTACK_WEB}${NC}"
echo -e "2. Navigate to: Gateways"
echo -e "3. Find gateway: ${GREEN}$GATEWAY_NAME${NC}"
echo -e "4. Gateway should show 'Connected' status within 1-2 minutes"
echo ""
echo -e "${YELLOW}Troubleshooting:${NC}"
echo -e "View gateway logs:"
echo -e "  ${BLUE}ssh ${GATEWAY_USER}@$GATEWAY_IP${NC}"
echo -e "  ${BLUE}journalctl -u basicstation -f${NC}"
echo ""
